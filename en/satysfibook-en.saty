%@require: stdjabook
@import: satysfibook-en-cls
@require: code
@require: enumitem/enumitem
@import: preface
@import: getting-started
@import: alias-command-definition


document(|
  title = {Unofficial translation of “The \SATySFi;book”};
  author = {Takashi SUWA (original)};
  preface = preface;
%  bibliography = bibliography;
  bibliography = [];
%  top-page = Some(top-page);
  top-page = None;
  copyright-page = (|
    title = {The \SATySFi;book（Web公開版 第1版）};
    author = {Takashi SUWA\hskip(5cm);};
    date = {2018年12月5日};
    contact = {\url{gfngfn.bd\@gmail.com}};
    printed-by = None;
  |);
|)'<
  +chapter?:(`introduction`){A motivation to develope \SATySFi;}<
  >
  +chapter?:(`getting-started`){A quick introduction to \SATySFi;}<#getting-started;>
  +chapter?:(`basic-command-definition`){コマンド定義：基礎編}<
    +p{
      \ref-chapter(`getting-started`);で\pkg{stdjareport}を用いて
      \SATySFi;の基礎的なコマンドの用法を知った．
      ところで，マークアップ言語の大きな強みのひとつは
      自前でコマンドを定義することによって
      種々の自動処理を実現したり独自の意味マークアップを規定したりできる点にあったはずである．
      実際，\codem{+chapter}とか\codem{+p}とか\codem{\\dfn}とかいった
      コマンドたちは単に\pkg{stdjareport}クラスによって定義が提供されているだけであり，
      その気になればユーザでも同様の定義を書いたりできるはずだ．
      そろそろ自前でコマンドを定義したくてうずうずしている読者も多いかと思う．
      この章では，コマンド定義のごく基礎的な方法を紹介する．
      あらかじめ言ってしまうとここでの説明はとてもアドホックなものになっており，
      \SATySFi;をよく理解されたのちにこの章を読めば
      「こんな子供騙しな説明をしていたのか」と驚かれるかもしれないが，
      読者の様々なバックグラウンドを鑑み，
      まず最初の一歩としておおまかに把握してもらうには良い説明だろうと
      判断してのことなのでご容赦願いたいと思う．
      より深い理解を獲得し，より柔軟で幅広い種類の処理をコマンドとして定義するには，
      \ref-chapter(`overall-structure`);で
      \SATySFi;が行なっている組版処理の全体像を把握した上で
      \ref-chapter(`advanced-command-definition`);に臨んでいただきたい．
    }
    +section{簡単なエイリアス}< #alias-command-definition; >
%    +section{プログラミング言語としての\SATySFi;}< #programming; >
  >

>