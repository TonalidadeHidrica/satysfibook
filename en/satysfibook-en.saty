@require: stdjabook
@require: enumitem/enumitem
@require: code

let-inline ctx \TeX = 
  let font-size = get-font-size ctx in
  let (xw,xh,xe) = get-natural-metrics (read-inline ctx {x}) in
  let eb = read-inline ctx {E} in
  let (ew,eh,ed) = get-natural-metrics eb in
  (read-inline ctx {T}) ++
  (inline-skip (0pt -' (font-size *' 0.1667))) ++
  (inline-graphics ew (eh -' (xw *' 0.5)) (ed +' (xw *' 0.5)) (fun (x,y) -> ([
    draw-text (x,y -' (xw *' 0.5)) eb
  ]))) ++
  (inline-skip (0pt -' (font-size *' 0.125))) ++
  (read-inline ctx {X})

let-inline ctx \LaTeX = 
  let tb = read-inline ctx {T} in
  let (tw,th,td) = get-natural-metrics tb in
  let font-size = get-font-size ctx in
  let ab = read-inline ctx {A} in
  let (aw,ah,ad) = get-natural-metrics ab in
  (read-inline ctx {L}) ++ 
  (inline-skip (0pt -' (font-size *' 0.36))) ++
  (inline-graphics (aw *' 0.7) (ah *' 0.7) (ad *' 0.7) (fun (x,y) -> ([
     draw-text (0pt,0pt) ab
     |> linear-transform-graphics 0.7 0.0 0.0 0.7
     |> shift-graphics (x,y +' th -' (ah *' 0.7))
  ]))) ++
  (inline-skip (0pt -' (font-size *' 0.15))) ++
  (read-inline ctx {\TeX;})


let-inline \file f = {\code(f);}
in

document(|
  title = {The \SATySFi; book};
  author = {};
  show-title = true;
  show-toc = true;
|)'<
  +section{A motivation to develope \SATySFi;}<
  >
  +section{A quick introduction to \SATySFi;}<
    +p{
      I explain basics of \SATySFi; based on “stdjareport” class which one can use just after the installing \SATySFi;.
      If you have an experience to use \LaTeX; then you probably can easily guess the behaviros from expamples of codes.
      I will mention the big differences between \SATySFi; and \LaTeX; (with a markup with a usual class file).
    }
    +p{
      If you have no experience with \LaTeX; and especially if you are familiar with Markdown or reStructuredText, then you may thin “why such a redundancy code is needed”.
      These are needed for the two reason: To detect possible errors before typesetting process, To enable uses to defined one's own commands.
      I hope users to understands such reasons.
    }
    +subsection{Type of files and extensions}<
      +p{
        \SATySFi; deal with the following two types of files as inputs form users:
        \listing{
          * Document file: The file with contents of documents.
          * Package file(s): Files with the definitions of commands.
        }
        There is also a special package file which describes how to mark up a document file.
        Such package file is called \emph{class file}.
        Th extension of a package file must be \code(`.satyh`);\footnote{An extension code(`.satyg`) is also used. At this point it is enough if you know en extension \code(`satyh`); The details are explaind when I explain a text mode.}.
        There is not rule for an extension of a document file, but usually \code(`.saty`); is used.
        I strongly recommend to use the extension \code(`.saty`); if you have no special reason.
      }
    >
    +subsection{A structure of a document}<
      +p{
        Here is an example of a document file.
      }
      +code(`
        @require: stdjareport
        document (|
        title = {An example};
        author = {Type set};
        |) '<
          +chapter{First chapter}<
            +p{
              This is the first paragraph by \SATySFi;
              Paragraphs are marked with \defn{block command}.
            }
          >
        >
      `);
      +p{
         Indents have no meaning with parsing, so you can do it as you want\footnote{Of course, customary I recommend to add indents according to the levels of nests.}.
         Let us call \emph{preamble} the part before \code(`document`); in the document file following \LaTeX;
         By writing 
       }
       +code(`
         @require: <package name>
       `);
       +pn{
        in the preamble, one can include the package file installed in the system.
        The package is a file in which the source code is written.
        For example, the body if \file(`stdjareport`); is the file \file(`stdjareport.saty`);.
        In the preamble, the name without the extension is written.
        (\code(`.satyh`); is automatically added.)
        (“Local”) Package files in the directory which the document file can be loaded with
      }
      +code(`
        @import: <The relative path to the file>
      `);
      +pn{
        Similar to the above, the extension is automatically added, hence it is not written.
      }
      +p{
        You add necessary information like title and authors in \code(`(|...|)`); and write a document itself in \code(`'<...>`);.
        This formalism is the same as those in class files located in \file(`lib-satysfi/dist/package/`); in the GitHub repository, like \file(`stdjabook`); class.
        The contents of a document file is mainly divided into the following two parts:
      }
      +listing{
        * block text: things in block directions.
        * inline text: things in inline directions.
      }
      +pn{
        The inline texts are the parts which users write texts as usual strings.
        Block texts are written in \code(`<...>`); and inline texts are written in \code(`{...}`);
        Note that you have to use \code(`'<`); instead of \code(`<`); as the beginning of the block text of all document as in the  above code.
        By using the notion in \TeX;, block texts correspond to things in vertical modes and inline texts correspond to things in horizontal modes.
      }
      +p{
        Let us generated the PDF file from the above example.
        First you have to save the above document file in a directory.
        Assume that the name of the file is \code(`hello.saty`);
        Open the terminal, moving the directory which \code(`hello.saty`); is, and execute
      }
      +code(`
        satysfi hello.saty
      `);
      +pn{
        If you have no error in the document file, the file \file(`hello.satysfi-aux`); and \code(`hello.pdf`); should be generated.
        The file \file(`hello.satysfi-aux`); is called \emph{auxiliary file}.
        You may ignore this file here.
        The file \file(`hello.pdf`); is the file we need.
        You can confirm a small document is generated in this file by opening this file.
      }
      +p{
        In the above example, there are some examples like \code(`+chapter{...}<...>`);, \code(`+p{...}`); and \code(`dfn{...}`);, which maybe you can guess what they are but in which many symbols are used.\footnote{Just in case, commands as \code(`+chapter`); and \code(`+p`); are defined in \file(`stdjaporet`); and they are are not implemented in \SATySFi; itself. You can read the class file \file(`stdjareport.satyh`); by opening this file if you want.}
        I will explain such commands in the following sections.
      }
    >
    +subsection{Paragraphs}<
      +p{
        The paragraphs are regarded as things which converts a list of strings to list of lines.
        This is formulated as a command whose argument is inline texts and which returns blocks.
        As below, one can use \code(`+p`); in block texts:
      }
      +code(`
        +p{
          Tomorrow is another day.
        }
      `);
      +p{
        Things which I wrote “blocks” is not really “block texts”, but at this point it is safe to think them as somethings similar to block texts.
        A command used in block texts, namely a command which “returns blocks” starts with \code(`+`); and is called a \emph{block command}.
        A command used in inline texts starts with \code(`\`); (like \LaTeX;) and is called a \emph{inline text}.
        The second letter of both commands should be a latin character and the others should be a latin character, a number, or hyphen.
      }
      +p{
        There are three types of arguments for commands:
        \listing{
          * \code(`(...)`);: expression arguments.
          * \code(`{...}`);: inline arguments.
          * \code(`<...>`);: block arguments.
        }
        To give arguments to a command is called the \emph{application} of the command.
        The syntax of applications are expressed as
        \code(`
          cmd[(...)]*(;|[({...}|<...>)]*)
        `);
        using a meta syntax like a regular expression.
        Here \code(`cmd`); means an inline command in inline texts and a block command in block texts.
        Namely, the application of a command starts with a command following some (possibly zero) arguments and after that \code(`;`); or some (should be greater than zero) inline or block arguments follow.
      }
      +p{
        A block text, namely things inside \code(`<...>`); is an iteration of applications of commands.
        One can write usual strings and also applications of inline commands in an inline text (things inside \code(`{...}`);).
        However, some characters which have special meanings should be escaped with \code(`\`);
        The characters which should be escaped is \code(`{`); \code(`}`); \code(`<`); \code(`>`); \code(`|`); \code(`%`); \code(`*`); \code(`;`); \code(`#`); \code(`$`); \code(`\`); \code(`@`); \code(`` ` ``);.
        You should be careful with \code(`;`); because this character frequently appears.
      }
    >
    +subsection{Chapters, sections}<
      +p{
        You use \code(`+chapter`);, \code(`+section`); and \code(`+subsection`);
        The names of commands follows those of \LaTeX; but the usage is little different.
        These commands are used as
      }
      +code(`
        +chapter{chapter title}<
          contents
        >
      `);
      +pn{
        in block texts.
        In this formulation, you should give not only as a chapter title but also contents of the chapter as a block text to the second argument.
        The chapter title is an inline text because it is a list of strings.
        The contents is a block text because it is a list of paragraphs in the block direction.
        The usages of \code(`+section`); and \code(`+subsection`); are completely the same.
      }
    >
  >
  
>