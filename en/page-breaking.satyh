% -*- coding: utf-8 -*-
@import: settings

let page-breaking = '<
  +p{
    The most difficult part in \SATySFi; mechanism may be page-breaking. 
    An abstract of the processes itself is merely below\; separating sequences of block-boxed all of contents into appropriate lengths per page.
    But, to generate good documents is needed page-breaking with procedural processes. 
    So, this is the essential part to develop \SATysFi;'s class file.

    First, the primitive, that is equivalent to page-breaking is this:

    \val({page-break})(Type.(page --> (tymtausub ${2} --> (tymtausub ${3} --> (block-boxes --> document)))));%

    I'll explain later about \type(Type.(tymtausub ${2})); and \type(Type.(tymtausub ${3}));, because they are too complex to describe now.
    Anyway, putting the 2nd, the 3rd arguments typed these make the page-breaking interface extremely simple.
    The 1st argument is paper-size. The 4th argument is the sequence of block-boxes that is target of page-breaking. 

    Type \type(Type.page); is a data-type that is defined as: 

    \d-code(```
      type page =
        | A0Paper | A1Paper | A2Paper | A3Paper | A4Paper | A5Paper
        | USLetter | USLegal
        | UserDefinedPaper of length * length
    ```);%

    Constructors like \codem{A4Paper} represent are what you imagined
      \footnote{
      To be honest, type \type(Type.(product [length; length])); is sufficient to to set paper-size.
      I should have provided the values like \codem{A4Paper} at package level,
      but it is not. Because of the (by original text, with word ``阿呆な" ) author's fault that of formalized like this at past days.
      \val({Paper.a4})(Type.(product [length; length]));%
      Perhaps, type \type(Type.page); will disappear with incompatible change in near future. 
  }.
  To short this paragraph maximum roughly, the \codem{page-break} is the primitive.
    that separates the sequence of block-boxes provided as the 4th argument based on paper-size provided as the 1st argument.
    The previous line is not satisfying as an explanation of \SATySFi;'s' page-breaking mechanism.
    From the next paragraphs, I'll describe it step by step.
  }
  +p{
    What you should be note first is type of return value \type(Type.document);.
    This type does not appear of return value other than the primitive \codem{page-break}.
    So, to construct value as type \type(Type.document); is allowed only \codem{page-break} substantially. 
    
    \SATySFi; wants document file to have type \type(Type.document); with type-checking.
    There is always \codem{page-break} at class file's bottom\footnote{
    A class file which wants end-users to write \codem{page-break} directly
    may not need to contain \codem{page-break}. And you do not have to create the class file usually 
    }, and constructed sequence of block-boxes based on the information provided by user
    has a description to process page-breaking.
    Actually, the function \codem{document} that we wrote to generate document based on the class \pkg{stdjareport} previous is merely function.
    So, below snippet shows apply the function \codem{document}:
    
    \d-code(```
      @require: stdjareport

      document (|
        （文書情報）
      |) '<
        （内容）
      >
    ```);%
    the function \codem{document} has A type below:
    
    \quote{
      \type(Type.(forall-kinded ${\alpha}
        [
          ({title}, inline-text);
          ({author}, inline-text);
        ]
        (tymalpha --> (block-text --> document))));
    }%

    The function received the 1st argument as record described title and author,
    and the 2nd argument as block-text of contents. It returns the value its type 
    \type(Type.document); at last.
  }
   +p{
    Let me talk about \type(Type.(tymtausub ${2})); I have put here.
    This is a type below:

    \quote{
      \type(Type.(
        record [({page-number}, int)] -->
          record [({text-height}, length); ({text-origin}, point)]
      ));
    }%
    From this code, you see the 2nd argument provided to \codem{page-break}
    is a function that receives a record and returns record.
    This function called at time within processing page-breaking;
    determined page contents until ${\paren{n - 1}} page,
    and pass a record
    \codem{(\| page-number = \meta{n}\; \|)}
    to seek a point of separate contents of ${n} page from sequence of block-boxes left.
    And the function returns value to page-breaking processing system below:
    \codem{(\| text-height = \meta{h}\; text-origin = (\meta{x}, \meta{y})\; \|)}
    The information contains below:
    \listing{
      * ${h}：\quad;
          Length of block-progression direction of contents text-area at ${n} page.
      * ${\tuple{|x|y|}}：\quad;
        Left-top coordinate to position contents actually separated. 
    }%
    But, you should take care of difference between axis of Graphics; ${y} of ${\tuple{|x|y|}} at here is 
    a value based on an axis it is that having direction to bottom is ${+y}
    and left-top on paper as origin.
    If you want document pages as same format, having same length of texts from same point, on each pages,
    you can set a function that returns static ${h} and ${\tuple{|x|y|}} not depends on ${n}.
    If you want change margins between left and right (general case is binding),
    you can set a function returns which value depends on ${n} is odd-or-even. 
  }
  +p{
    Similarly, I also refer to type \type(Type.(tymtausub ${3}));, the 3rd argument of \codem{page-break} is like below:
     \quote{
      \type(Type.(
        record [({page-number}, int)] -->
          record [
            ({header-content}, block-boxes);
            ({header-origin}, point);
            ({footer-content}, block-boxes);
            ({footer-origin}, point);
          ]
      ));
    }%
    This is a type of function what receives record and returns record, like the 2nd argument.
    The function set the 3rd argument of \codem{page-break} is called by being passed a record 
    \codem{(\| page-number = \meta{n}\; \|)}
    at time;
    it has determined contents of ${n} th page and 
    completed \it{hooking processing} in the page. 
    
      \d-codem{
      (\|
      \new-line;\quad;
      header-content = \metasub(${1}){bb}\;
      header-origin = (\metasub(${1}){x}, \metasub(${1}){y})\;
      \new-line;\quad;
      footer-content = \metasub(${2}){bb}\;
      footer-origin = (\metasub(${2}){x}, \metasub(${2}){y})\;
      \new-line;
      \|)
    }%
    Then, the function returns record formated above.
    The record has information shows below to page-breaking processing system.

    \listing{
      * Draw sequence of block-boxs ${bb_1} as header, it pointed ${\tuple{|x_1|y_1|}} as left-top.
      * Draw sequence of block-boxs ${bb_2} as header, it pointed ${\tuple{|x_2|y_2|}} as left-top.
    }%
    Please take care of axis of value. It is as same as the 2nd argument that described previous paragraph;
    this axis has coordinate origin is left-top and direction ${+y} increase page bottom.
    Only \codem{page-break}'s the 2nd and the 3rd arguments use this axis.
  }
  +p{
    Above paragraphs are all specifications of primitive \codem{page-break}.
    Let me appends a bit to them, it is about \it{At time line-breaking actually}.
，  Correctly, \it{\codem{page-break} itself processes page-breaking} is not true,
    but starting process page-breaking  at all of document being returned value
    as type  \type(Type.document);
    In other words, a value as type \type(Type.document); is
    \it{frozen} information about finally page-breaking that is not being processed page-breaking actually. 
    It means; there is no process doing page-break actually written having return-value as type  
    \type(Type.document); without last one. 
    Because there is no primitive arranging type \type(Type.document);, 
    There is no reason to create a value as type \type(Type.document); by \codem{page-break} 
    without returning contents to output PDF.
    The reason was what causing \it{side-effect} at page-breaking not using return-value,
    and you can not do it\footnote{
      There is no reason you cannot do it.
      If needed, it is sounds good to change the specification what imcompatible in future;
      \it{\codem{page-break} itself processes a page-breaking}.}.}

  >
+section{primitves related page-breaking}<
    +p{
      There are some primitives to process related page-breaking.
      Let me introduce them here.

      \val-explain?:(`clear-page`)({clear-page})%
        (Type.(block-boxes)) {
          Page break in force.
          In case inserted it at a target page unbreakable, 
          it is equivalent as 
          \codem{block-nil}.
        }%

      \val-explain?:(`add-footnote`)({add-footnote})%
        (Type.(block-boxes --> inline-boxes)) {
          
          \codem{add-footnote \meta{bb}} inserts block-boxes \codem{\meta{bb}}
          as footnote.
          Return value has type \type(Type.inline-boxes);.
          Associate with a place inserted this return value, 
          and calculate inserting the footnote at processing page-breaking.  
          As inline-boxes feature itself is equivalent as \codem{inline-nil}.
        }%

      \val-explain?:(`hook-page-break`)({hook-page-break})%
        (Type.(((record [({page-number}, int)] --> (point --> unit))) --> inline-boxes)) {
          Use as \codem{hook-page-break \meta{f}}.
          Return value is inline-boxes.
          Features in typesetting is equivalent as \codem{inline-nil}.
          But, a hooking function \codem{\meta{f}} starts
          when fixed place including here is which page in processing page-breaking.
          
          The case mined multiple hooking functions at the same page,
          the functions starts by page contents order from initial to last.
          
          where result of page-breaking, inline-boxes which mined *hook* function 
          is included at page ${n}, and refer point is ${\tuple{|x|y|}} then,
          \codem{\meta{f}} starts when it received 
          \codem{(\| page-number = \meta{n}\; \|)} as 1st argument 
          and 
          \codem{(\meta{x}, \meta{y})} as the 2nd argument.
          You can invoke *side-effects* with these argument values
          like to register cross-reference linking based on page number with \codem{\meta{f}} 's contents.
      
        }%

      About thing “To evaluate graphics is triggerd at page-breaking” 
      written at \ref-chapter(`graphics`); is 
      as same as this \codem{hook-page-break}.
      Functions that receives reffered point and returns graphics,
      like the 4th argument of \codem{inline-graphics}, and 
      hooking functions by \codem{hook-page-break}
      are start evaluations at the same time.
    }
  >
+section{Basis of class file}<

  +p{
    You got matter about page-breaking process.
    Next, you would get nice idea to create a class file.
    Then, you may notice until you have not think ever:\quad;
    where is *Outermost* text processing context from?\quad;
    This is much simple. You can receive by primitives like:

    \val-explain?:(`get-initial-context`)({get-initial-context})%
    (type.(length --> (cmdI [math] --> context))){
      This Returns default text processing context.
      The 1st argument as a paragraph width,
      The2nd argument as a command that applying to math equation appeared at inline-text
      like \codem{set-math-command}.
    }%
    \codem{get-initial-context} is only one that able to set a paragraph width.
      There is \codem{get-initial-context} in a class file that work as well. 
      So, transform text processing context returned by this as *outermost* text processing context by needs.
  } 


      +example{
        A definition of “an essentially minimum class file that is more or less able to be used” is like this:
        
        \d-code(```
        let-inline ctx \math m = 
          script-guard Latin (embed-math ctx m)

        let-block ctx +p it {
          line-break true true ctx
            (read-inline ctx it ++ inline-fil)

        let document bt =
          let ctx = 
          get-initial-context 440pt (command \math)
            |> set-dominant-narrow-script Latin
          in
          let bb = read-block ctx bt in
          page-break A4Paper
            (fun _ -> (|
              text-origin + (80pt, 100pt);
              text-height = 630pt;
            |))
            (fun _ -> (|
              header-origin = (0pt, 0pt);
              header-content = block-nil;
              footer-origin = (0pt, 0pt);
              footer-content = block-nil;
            |))
            bb
        ```);

        With this class file,
        you are able to write document that only has paragraphs with \codem{+p} 
        as block-text arguments of \codem{document} unless you define new commands.
      }
  >
>