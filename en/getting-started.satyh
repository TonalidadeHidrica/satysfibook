@import: satysfibook-en-cls
@import: settings
@require: enumitem/enumitem

let getting-started = '<
  +p{
    I explain basics of \SATySFi; based on “stdjareport” class which one can use just after the installing \SATySFi;.
    If you have an experience to use \LaTeX; then you probably can easily guess the behaviros from expamples of codes.
    I will mention the big differences between \SATySFi; and \LaTeX; (with a markup with a usual class file).
  }
  +p{
    If you have no experience with \LaTeX; and especially if you are familiar with Markdown or reStructuredText, then you may thin “why such a redundancy code is needed”.
    These are needed for the two reason: To detect possible errors before typesetting process, To enable uses to defined one's own commands.
    I hope users to understands such reasons.
  }
  +section{Type of files and extensions}<
    +p{
      \SATySFi; deal with the following two types of files as inputs form users:
      \listing{
        * Document file: The file with contents of documents.
        * Package file(s): Files with the definitions of commands.
      }
      There is also a special package file which describes how to mark up a document file.
      Such package file is called \emph{class file}.
      Th extension of a package file must be \path{.satyh} \footnote{An extension \path{.satyg} is also used. At this point it is enough if you know en extension \path{.satyh} The details are explaind when I explain a text mode.}.
      There is not rule for an extension of a document file, but usually \code(`.saty`); is used.
      I strongly recommend to use the extension \code(`.saty`); if you have no special reason.
    }
  >
  +section{A structure of a document}<
    +p{
      Here is an example of a document file.
    }
    +code(`
@require: stdjareport
document (|
title = {An example};
author = {Type set};
|) '<
+chapter{First chapter}<
  +p{
    This is the first paragraph by \SATySFi;
    Paragraphs are marked with \defn{block command}.
  }
>
>
    `);
    +p{
       Indents have no meaning with parsing, so you can do it as you want\footnote{Of course, customary I recommend to add indents according to the levels of nests.}.
       Let us call \emph{preamble} the part before \code(`document`); in the document file following \LaTeX;
       By writing 
      \d-code(`
@require: <package name>
      `);
      in the preamble, one can include the package file installed in the system.
      The package is a file in which the source code is written.
      For example, the body if \pkg{stdjareport} is the file \path{.stdjareport.saty}.
      In the preamble, the name without the extension is written.
      (\code(`.satyh`); is automatically added.)
      (“Local”) Package files in the directory which the document file can be loaded with
      \d-code(`
@import: <The relative path to the file>
      `);
      Similar to the above, the extension is automatically added, hence it is not written.
    }
    +p{
      You add necessary information like title and authors in \code(`(|...|)`); and write a document itself in \code(`'<...>`);.
      This formalism is the same as those in class files located in \path{lib-satysfi/dist/package/} in the GitHub repository, like \path{stdjabook} class.
      The contents of a document file is mainly divided into the following two parts:
      \listing{
        * block text: things in block directions.
        * inline text: things in inline directions.
      }
      The inline texts are the parts which users write texts as usual strings.
      Block texts are written in \code(`<...>`); and inline texts are written in \code(`{...}`);
      Note that you have to use \code(`'<`); instead of \code(`<`); as the beginning of the block text of all document as in the  above code.
      By using the notion in \TeX;, block texts correspond to things in vertical modes and inline texts correspond to things in horizontal modes.
    }
    +p{
      Let us generated the PDF file from the above example.
      First you have to save the above document file in a directory.
      Assume that the name of the file is \code(`hello.saty`);
      Open the terminal, moving the directory which \code(`hello.saty`); is, and execute
      \d-code(`
satysfi hello.saty
      `);
      If you have no error in the document file, the file \path{hello.satysfi-aux} and \code(`hello.pdf`); should be generated.
      The file \path{hello.satysfi-aux} is called \emph{auxiliary file}.
      You may ignore this file here.
      The file \path{hello.pdf} is the file we need.
      You can confirm a small document is generated in this file by opening this file.
    }
    +p{
      In the above example, there are some examples like \code(`+chapter{...}<...>`);, \code(`+p{...}`); and \code(`dfn{...}`);, which maybe you can guess what they are but in which many symbols are used.\footnote{Just in case, commands as \code(`+chapter`); and \code(`+p`); are defined in \path{stdjaporet} and they are are not implemented in \SATySFi; itself. You can read the class file \path{stdjareport.satyh} by opening this file if you want.}
      I will explain such commands in the following sections.
    }
  >
  +section{Paragraphs}<
    +p{
      The paragraphs are regarded as things which converts a list of strings to list of lines.
      This is formulated as a command whose argument is inline texts and which returns blocks.
      As below, one can use \code(`+p`); in block texts:
    }
    +code(`
+p{
Tomorrow is another day.
}
    `);
    +p{
      Things which I wrote “blocks” is not really “block texts”, but at this point it is safe to think them as somethings similar to block texts.
      A command used in block texts, namely a command which “returns blocks” starts with \code(`+`); and is called a \emph{block command}.
      A command used in inline texts starts with \code(`\`); (like \LaTeX;) and is called a \emph{inline text}.
      The second letter of both commands should be a latin character and the others should be a latin character, a number, or hyphen.
    }
    +p{
      There are three types of arguments for commands:
      \listing{
        * \code(`(...)`);: expression arguments.
        * \code(`{...}`);: inline arguments.
        * \code(`<...>`);: block arguments.
      }
      To give arguments to a command is called the \emph{application} of the command.
      The syntax of applications are expressed as
      \code(`cmd[(...)]*(;|[({...}|<...>)]*)`);
      using a meta syntax like a regular expression.
      Here \code(`cmd`); means an inline command in inline texts and a block command in block texts.
      Namely, the application of a command starts with a command following some (possibly zero) arguments and after that \code(`;`); or some (should be greater than zero) inline or block arguments follow.
    }
    +p{
      A block text, namely things inside \code(`<...>`); is an iteration of applications of commands.
      One can write usual strings and also applications of inline commands in an inline text (things inside \code(`{...}`);).
      However, some characters which have special meanings should be escaped with \code(`\`);
      The characters which should be escaped is \code(`{`); \code(`}`); \code(`<`); \code(`>`); \code(`|`); \code(`%`); \code(`*`); \code(`;`); \code(`#`); \code(`$`); \code(`\`); \code(`@`); \code(`` ` ``);.
      You should be careful with \code(`;`); because this character frequently appears.
    }
  >
  +section{Chapters, sections}<
    +p{
      You use \code(`+chapter`);, \code(`+section`); and \code(`+section`);
      The names of commands follows those of \LaTeX; but the usage is little different.
      These commands are used as
      \d-code(`
+chapter{chapter title}<
contents
>
      `);
      in block texts.
      In this formulation, you should give not only as a chapter title but also contents of the chapter as a block text to the second argument.
      The chapter title is an inline text because it is a list of strings.
      The contents is a block text because it is a list of paragraphs in the block direction.
      The usages of \code(`+section`); and \code(`+section`); are completely the same.
    }
  >
  +section{New words}<
    +p{
      One uses \code(`\defn`); to a name etc. defined first in a document as follows.
      \d-code-and-block(`
+p{
  Arranging fonts and pictures following a manuscript and a design and make printed pages are called \dfn{typsettings}.
}
      `)<
        +p{
          Arranging fonts and pictures following a manuscript and a design and make printed pages are called \dfn{typsettings}.
        }
      >
      Latin characters in the argument is output by italic characters.
      Like this, an inline commands is a command which returns “a list of (possibly modified) strings”.
      As one can see from the syntax of applications of commands, a semicolon is added for a command with no argument.
      \d-code-and-block(`
+p{ \SATySFi; is a new typesetting system.}
      `)<
        +p{
          \SATySFi; is a new typesetting system.
        }
      >
    }
  >
  +section{Inline equations}<
    +p{
      Inline equations is written in \code(`${...}`); in inline texts.
      The syntax is very similar to that of \LaTeX;
      In the following example, the contents inside \code(`${...}`); is the same as that of \LaTeX;
      \d-code-and-block(`
+p{
  Equations can be written as ${E = mc^2}, ${F = G\frac{m_1 m_2}{r^2}}, ${x^x = e^{x \log x}}, like \LaTeX;}
}
      `)<
        +p{
          Equations can be written as ${E = mc^2}, ${F = G\frac{m_1 m_2}{r^2}}, ${x^x = e^{x \log x}}, like \LaTeX;
        }
      >
      Math commands which are commands in equations start with \code(`\`); which is the same as inline commands.
      You can not use the same name for a math command and an inline command.
      (Namely the name space is not separated.)
      Unlike the case of inline commands, \code(`;`); is not needed for the application of a math commands with no argument.
    }
    +p{
      Even though the syntax is similar to that of \LaTeX;, there are some differences.
      Especially how to write parentheses are very different from \LaTeX;
      There is nothing corresponding to \code(`\left`);, \code(`\right`); and \code(`\middle`);.
      Instead of this, a one command provides both open and close parentheses.
      If you want to use parentheses, use \code(`\paren{equation}`);
      One can use \code(`\set{...}`); for .... and \code(`\setsep{...}{...}`); for a set-builder notation, \code(`\abs{...}`); for absolute values, \code(`\dist{...}`); for two line brackes used for distance or norm.
      An application of a function can be written as \code(`\app{f}{x}`);
    }
    +p{
      Square brackets, curly brackets (which is not necessary for set notation), triangle brackets are provided by \code(`\sqbracket{...}`);, \code(`\brace{...}`); and \code(`\angle-bracket{...}`);, respectively.
      Because these commands does not point their “meanings”, it is supposed to not used in equations directly but used in commands defined by users (explained later)\footnote{However, in the next subsection, \code(`\sqbracket`); in equation will be appeared...}.
    }
    +p{
      More details of equations will be explained in chapter 10.
    }
  >
>