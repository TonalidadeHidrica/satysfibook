% -*- coding: utf-8 -*-
@import: settings

let page-breaking = '<
  +p{
    The most difficult part in \SATySFi; mechanism may be page-breaking. 
    The abstract of processing itself is only separating sequences of block-boxed all of contents into appropriate lengths per page.
    But, to generate good documents is needed page-breaking with procedual processings. 
    So, this is necesarry part to develope \SATysFi;'s classfile.

    First, the primitive, it is equivalent to page-breaking is below:

    \val({page-break})(Type.(page --> (tymtausub ${2} --> (tymtausub ${3} --> (block-boxes --> document)))));%

    I'll explain later about \type(Type.(tymtausub ${2})); and \type(Type.(tymtausub ${3}));. Because they are too complex to describe now.
    Anyway, putting 2nd,3rd arguments typed these make the page-breaking interface extremely simple.
    1st argument is paper-size, 4th argument is the sequence of block-boxes that is target of page-breaking. 

    Type \type(Type.page);is data-type that is defined as below: 

    \d-code(```
      type page =
        | A0Paper | A1Paper | A2Paper | A3Paper | A4Paper | A5Paper
        | USLetter | USLegal
        | UserDefinedPaper of length * length
    ```);%

    Constructors like \codem{A4Paper} represent are what you imagined
      \footnote{
      Writing actually, type \type(Type.(product [length; length])); satisfies to set paper-size.
      The values like \codem{A4Paper} privide at package level is smart, 
      but it is not. Because of the (by original text, with word ``阿呆な" ) author's fault that of formalized like this at past days.
      \val({Paper.a4})(Type.(product [length; length]));%
      Perhaps, type \type(Type.page); will desappear with imcompatible change in near future. 
  }.
  To short this paragraph maximum roughly, the \codem{page-break} is the primitive:
    that separates the sequence of block-boxes provided as 4th argument based on paper-size provided as 1st argument.
    The previous line is not satisfied as explain of \SATySFi;'s' page-breaking mechanism.
    With next paragraphs and so on, I'll explain the descriptions step by step.
  }
  +p{
    You should watch out first is type of return value \type(Type.document);.
    this type is not apper as return value without the primitive \codem{page-break}.
    So, to construct value as type \type(Type.document); is allowed only \codem{page-break} substancially. 
    
    \SATySFi; wants document file to set type \type(Type.document); with type-checking,
    so there is \codem{page-break} at classfile's bottom always\footnote{
    A classfile which wants end-users to write \codem{page-break} directly
    may be no need containing \codem{page-break}. And you do not have to create the classfile usually 
    }, and constructed sequence of block-boxes based on the information provided by user
    has a description to process page-breaking.
    Actually, the function \codem{document}, to generate document based on the class \pkg{stdjareport} previous is merely function.
    So, below snippet shows apply the function \codem{document}:
    
    \d-code(```
      @require: stdjareport

      document (|
        （文書情報）
      |) '<
        （内容）
      >
    ```);%
    the function \codem{document} has A type below:
    
    \quote{
      \type(Type.(forall-kinded ${\alpha}
        [
          ({title}, inline-text);
          ({author}, inline-text);
        ]
        (tymalpha --> (block-text --> document))));
    }%

    The function received 1st argument as record described title and author,
    and 2nd argument as block-text of contents. It returns the value its type 
    \type(Type.document); at last.
  }
   +p{
    Let me talk about \type(Type.(tymtausub ${2})); I have put here.
    This is a type below:

    \quote{
      \type(Type.(
        record [({page-number}, int)] -->
          record [({text-height}, length); ({text-origin}, point)]
      ));
    }%

>